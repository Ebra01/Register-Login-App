{"version":3,"sources":["Components/Navbar/Navbar.js","Components/MultiPageTest/Dashboard.js","Components/MultiPageTest/Login.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","links","localStorage","userInfo","onClick","e","preventDefault","logout","a","fetch","method","headers","then","resp","json","data","ok","removeFromLocalStore","refreshOnLogout","console","log","removeItem","window","location","reload","className","to","Dashboard","useState","current_user","state","setState","useEffect","getItem","JSON","parse","is_user","username","LoginUser","fetched","setFetched","cred","setCred","handleChange","target","id","value","handleLogin","body","stringify","login","setItem","pathname","auth","onSubmit","htmlFor","type","onChange","App","exact","path","component","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46d2946c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n   Link, NavLink, withRouter \r\n  } from 'react-router-dom';\r\n\r\n/*\r\nconst Navbar = () => {\r\n\r\n  const links = localStorage.userInfo ? \r\n  (<li><NavLink to=\"/logout\" >Logout</NavLink></li>) : \r\n  (<li><NavLink to=\"/login\">Login</NavLink></li>);\r\n  \r\n  return (\r\n    <nav className=\"nav-wrapper blue darken-1\">\r\n      <div className=\"container\">\r\n        <Link to='/' className=\"brand-logo\">TestSite</Link>\r\n        <ul className=\"right\">\r\n          {links}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n*/\r\n\r\nconst Navbar = () => {\r\n\r\n  const handleLogout = (e) => {\r\n    e.preventDefault();\r\n    const logout = async() => {\r\n      await fetch('/api/logout', {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Accept\": \"application/json\"\r\n        }\r\n      }).then(resp => {\r\n        resp.json().then(data => {\r\n          if (resp.ok) {\r\n            removeFromLocalStore();\r\n            refreshOnLogout();\r\n          } else {\r\n            console.log(data);\r\n          }\r\n        })\r\n      })\r\n    };\r\n\r\n    // Remove Current User on successful logout\r\n    const removeFromLocalStore = () => {\r\n      localStorage.removeItem(\"userInfo\");\r\n    };\r\n\r\n    // Refresh the page on successful logout\r\n    const refreshOnLogout = () => {\r\n      window.location.reload();\r\n    }\r\n\r\n    logout();\r\n  }\r\n\r\n  const links = localStorage.userInfo ? \r\n  (<li><button onClick={handleLogout} className=\"btn red lighten-1 black-text no-upper z-depth-1 waves-effect waves-light hoverable\">Logout</button></li>) : \r\n  (<li><NavLink to=\"/login\">Login</NavLink></li>);\r\n  \r\n  return (\r\n    <nav className=\"nav-wrapper blue darken-1\">\r\n      <div className=\"container\">\r\n        <Link to='/' className=\"brand-logo\">TestSite</Link>\r\n        <ul className=\"right\">\r\n          {links}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default withRouter(Navbar)","import React, { useState, useEffect } from 'react';\r\n// , {useEffect, useState}\r\n\r\nexport const Dashboard = () => {\r\n\r\n  const [state, setState] = useState({current_user: null});\r\n\r\n  // Load user on refreshing the page\r\n  useEffect(() => {\r\n    // fetch('/api/user/load', {\r\n    //   method: \"GET\",\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //     \"Accept\": \"application/json\"\r\n    //   }\r\n    // }).then(resp => {\r\n    //   resp.json().then(data => {\r\n    //     if (resp.ok) {\r\n    //       // console.log('data', data)\r\n    //       setState({current_user: data.current_user});\r\n    //     } else {\r\n    //       console.log(data);\r\n    //     }\r\n    //   })\r\n    // })\r\n    const data = localStorage.getItem(\"userInfo\")\r\n    if (data) {\r\n      setState(JSON.parse(data))\r\n    }\r\n  }, [])\r\n\r\n\r\n  const is_user = state.current_user ? (\r\n    <i className=\"green-text text-darken-2\">{state.current_user.username}</i>\r\n    ) : null\r\n\r\n  return (\r\n    <div className=\"container center\">\r\n      <h4>DashBoard</h4>\r\n      <div className=\"container h-text\">...</div>\r\n      <div className=\"container\">\r\n        <h5>Status : {is_user || <i className=\"red-text text-darken-2\">No User</i>}</h5>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nexport const LoginUser = () => {\r\n\r\n  const [fetched, setFetched] = useState(false);\r\n  const [cred, setCred] = useState();\r\n  const [state, setState] = useState({current_user: null});\r\n\r\n  // Load user on refreshing the page\r\n  useEffect(() => {\r\n    // fetch('/api/user/load', {\r\n    //   method: \"GET\",\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //     \"Accept\": \"application/json\"\r\n    //   }\r\n    // }).then(resp => {\r\n    //   resp.json().then(data => {\r\n    //     if (resp.ok) {\r\n    //       // console.log('data', data)\r\n    //       setState({current_user: data.current_user});\r\n    //       setFetched(true);\r\n    //     } else {\r\n    //       console.log(data)\r\n    //     }\r\n    //   })\r\n    // })\r\n    const data = localStorage.getItem(\"userInfo\")\r\n    if (data) {\r\n      setState(JSON.parse(data))\r\n    }\r\n    setFetched(true);\r\n  }, [])\r\n\r\n  const loadLoginPage = () => {\r\n    return (\r\n      <div className=\"container\">\r\n        <h4>Welcome !</h4>\r\n        <div className=\"container h-text\">...</div>\r\n        <form onSubmit={handleLogin} className=\"container\">\r\n\r\n          <h5 className=\"grey-text text-darken-2\">Sign In</h5>\r\n\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"usernameOrEmail\">Username / Email</label>\r\n            <input type=\"text\" id=\"usernameOrEmail\" onChange={handleChange}/>\r\n          </div>\r\n\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" onChange={handleChange}/>\r\n          </div>\r\n\r\n          <div className=\"input-field\">\r\n            <button className=\"btn pink lighten-1 hoverable waves-effect waves-light\">Login</button>\r\n          </div>\r\n\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setCred({\r\n      ...cred,\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    const login = async() => {\r\n      await fetch('/api/login', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Accept\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(cred)\r\n      }).then(resp => {\r\n        resp.json().then(data => {\r\n          if (resp.ok) {\r\n            setState({\r\n              current_user: data.current_user\r\n            })\r\n          } else {\r\n            console.log(data);\r\n          }\r\n        })\r\n      })\r\n    };\r\n    \r\n    login();\r\n  }\r\n\r\n  const addToLocalStore = () => {\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(state));\r\n  }\r\n\r\n  const redirectPage = () => {\r\n    // add current user to localStorage.\r\n    addToLocalStore();\r\n    \r\n    return <Redirect to={{\r\n      pathname: '/',\r\n      auth: state\r\n    }} />\r\n  }\r\n  \r\n  let is_user = () => {};\r\n  if (fetched){\r\n    is_user = state.current_user ? (redirectPage) : (loadLoginPage)\r\n  }\r\n  // console.log(state)\r\n  return (\r\n    <div className=\"container center\">\r\n      {is_user()}\r\n    </div>\r\n  )\r\n}","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Navbar from './Components/Navbar/Navbar';\nimport { Dashboard } from './Components/MultiPageTest/Dashboard';\nimport { LoginUser } from './Components/MultiPageTest/Login';\n// import { Main } from './Components/OnePageTest/main';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar/>\n          <Switch>\n            <Route exact path='/' component={Dashboard}/>\n            <Route path='/login' component={LoginUser}/>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}